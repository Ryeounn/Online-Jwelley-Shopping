<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="18KGold" xml:space="preserve">
    <value>18K PNJ Gold Earrings Jewels</value>
  </data>
  <data name="AboutUs" xml:space="preserve">
    <value>About Us</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>1 Ly Tu Trong, An Cu Ward, Ninh Kieu District, Can Tho City</value>
  </data>
  <data name="BraceletsHome" xml:space="preserve">
    <value>Bracelets are made from a variety of selected types of gold combined with quality stones and diamonds, and with the hands of many years of experience of jewelers, we create the best products to serve our customers the best. The most perfect item</value>
  </data>
  <data name="ColorbytheYardPendant" xml:space="preserve">
    <value>Color by the Yard Pendant</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="Copyright" xml:space="preserve">
    <value>Copyright © 2023 Jwelley: 1 Ly Tu Trong Street, An Cu Ward, Ninh Kieu Dictrict, Can Tho City, VietNam.</value>
  </data>
  <data name="Designer" xml:space="preserve">
    <value>Designer</value>
  </data>
  <data name="DiamondPlatinum" xml:space="preserve">
    <value>PNJ Diamond Platinum Wedding Ring</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Jwelley@gmail.com</value>
  </data>
  <data name="ExCollections" xml:space="preserve">
    <value>Explore Our Collections</value>
  </data>
  <data name="FeaturingCombo" xml:space="preserve">
    <value>Featuring rare comno from the now closed Argyle Diamond, Stone, Gold most quality. These combo jewelry are truly unique and will become an heirloom for future generations or as an investment you can wear. Jewels of the Kimberley also have an amazing collection of loose Combo jewelry available for viewing by private appointment.</value>
  </data>
  <data name="FeaturingHome" xml:space="preserve">
    <value>Featuring rare pink diamonds from the now closed Argyle Diamond Mine in Western Australia. These pink diamonds are truly unique and will become an heirloom for future generations or as an investment you can wear. Jewels of the Kimberley also have an amazing collection of loose pink diamonds available for viewing by private appointment.</value>
  </data>
  <data name="GraduatedLinkNecklace" xml:space="preserve">
    <value>Graduated Link Necklace</value>
  </data>
  <data name="HappyClients" xml:space="preserve">
    <value>Happy Clients</value>
  </data>
  <data name="HappyDiamondsIcons" xml:space="preserve">
    <value>Happy Diamonds Icons</value>
  </data>
  <data name="HappyHearts" xml:space="preserve">
    <value>Happy Hearts</value>
  </data>
  <data name="HappySpirit" xml:space="preserve">
    <value>Happy Spirit</value>
  </data>
  <data name="IceCube" xml:space="preserve">
    <value>Ice Cube</value>
  </data>
  <data name="JewelsoftheYashGems&amp;Jewelry" xml:space="preserve">
    <value>Jewels of the Yash Gems &amp; Jewelry</value>
  </data>
  <data name="JusteUn" xml:space="preserve">
    <value>Juste Un Clou Single Earring</value>
  </data>
  <data name="Landspace" xml:space="preserve">
    <value>Landspace at the store</value>
  </data>
  <data name="LangEnglish" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="LangVietnamese" xml:space="preserve">
    <value>Vietnamese</value>
  </data>
  <data name="Meeting" xml:space="preserve">
    <value>Meeting</value>
  </data>
  <data name="menuHome" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="NewCollections" xml:space="preserve">
    <value>New collections are released to our VIP customers, sign up to never miss out</value>
  </data>
  <data name="OurNews" xml:space="preserve">
    <value>Our News</value>
  </data>
  <data name="OurStory" xml:space="preserve">
    <value>Our Story</value>
  </data>
  <data name="Partners" xml:space="preserve">
    <value>Partners</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>+1234 567 890</value>
  </data>
  <data name="Policy" xml:space="preserve">
    <value>Policy</value>
  </data>
  <data name="Projects" xml:space="preserve">
    <value>Projects</value>
  </data>
  <data name="Receive" xml:space="preserve">
    <value>Receive the latest product information, promotions and more.</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="Return" xml:space="preserve">
    <value>Return and Warranty</value>
  </data>
  <data name="Rules" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="Shop" xml:space="preserve">
    <value>Shop</value>
  </data>
  <data name="ShopProduct" xml:space="preserve">
    <value>Shop By Product</value>
  </data>
  <data name="SIGNUP" xml:space="preserve">
    <value>Sign up to receive new news</value>
  </data>
  <data name="SmilePendant" xml:space="preserve">
    <value>Smile Pendant</value>
  </data>
  <data name="ViewMore" xml:space="preserve">
    <value>View More</value>
  </data>
  <data name="WhiteGold" xml:space="preserve">
    <value>PNJ 14K White Gold Diamond Earrings</value>
  </data>
  <data name="Yash's Bracelet" xml:space="preserve">
    <value>Yash's Bracelet</value>
  </data>
  <data name="Yash'SComBoJewelry" xml:space="preserve">
    <value>Yash's ComBo Jewelry</value>
  </data>
  <data name="YASHGEMS&amp;JEWELRY" xml:space="preserve">
    <value>YASH GEMS &amp; JEWELRY</value>
  </data>
</root>